The problem with the code is that it's not correctly calculating the longest common substring. The longest common substring problem is a classic computer science problem: the longest common substring problem is to find the longest string (or strings) that is a substring (or are substrings) of two or more strings.

The correct implementation is to use a 2D dynamic programming table, where `dp[i][j]` is the length of the longest common substring ending at `s[i]` and `t[j]`. If `s[i]` is equal to `t[j]`, then `dp[i][j]` is `dp[i-1][j-1] + 1`. Otherwise, it's zero. We also need to keep track of the maximum value found in the dp table, which represents the length of the longest common substring.

Here is the corrected python code:

```python
def lcs_length(s, t):
    dp = [[0]*(len(t)+1) for _ in range(len(s)+1)]
    max_length = 0
 
    for i in range(1, len(s)+1):
        for j in range(1, len(t)+1):
            if s[i-1] == t[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
                max_length = max(max_length, dp[i][j])
 
    return max_length
```

This corrected function should now work as intended. For example, `lcs_length('witch', 'sandwich')` will return `2`, and `lcs_length('meow', 'homeowner')` will return `4`.