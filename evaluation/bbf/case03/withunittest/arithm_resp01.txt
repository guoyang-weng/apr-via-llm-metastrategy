    # pylint: disable=redefined-outer-name
    def arithm_expr_parse_verA(line_tokens):
        """Constructs an arithmetic expression tree
        :param line_tokens: list of token strings containing the expression
        :returns: expression tree
        :complexity: linear
        """
        PRIORITY = {';': 0, '(': 1, ')': 2, '-': 3, '+': 3, '*': 4, '/': 4}
        vals = []
        ops = []
        for tok in line_tokens + [';']:
            if tok in PRIORITY:  # tok is an operator
                while (tok != '(' and ops and
                    PRIORITY[ops[-1]] >= PRIORITY[tok]):
                    top_op = ops.pop()
                    if top_op != '(':
                        vals.append((vals.pop(), top_op, vals.pop()))
                if tok == ')':
                    ops.pop()    # this is the corresponding '('
                else:
                    ops.append(tok)
            elif tok.isdigit():  # tok is an integer
                vals.append(int(tok))
            else:                # tok is an identifier
                vals.append(tok)
        return vals.pop()

    ###The following code is context, no change required###
    # def arithm_expr_eval_verA(cell, expr):
    #     """Evaluates a given expression
    #     :param expr: expression
    #     :param cell: dictionary variable name -> expression
    #     :returns: numerical value of expression
    #     :complexity: linear
    #     """
    #     if isinstance(expr, tuple):
    #         (left, operand, right) = expr
    #         lval = arithm_expr_eval_verA(cell, left)
    #         rval = arithm_expr_eval_verA(cell, right)
    #         if operand == '+':
    #             return lval + rval
    #         if operand == '-':
    #             return lval - rval
    #         if operand == '*':
    #             return lval * rval
    #         if operand == '/':
    #             return lval // rval
    #     elif isinstance(expr, int):
    #         return expr
    #     else:
    #         cell[expr] = arithm_expr_eval_verA(cell, cell[expr])
    #         return cell[expr]

    # PRIORITY = {';': 0, '(': 1, ')': 2, '-': 3, '+': 3, '*': 4, '/': 4}

    ###Unit test to be passed, should not be changed###
    # import unittest
    # class TestTryalgo(unittest.TestCase):
    #     def test_arithm_expr_eval_verA(self):
    #         L = [("13 + A47 * ZZ22", 37),
    #              ("( 12 - 2 ) * 5", 50),
    #              ("4 / 7 + 4 / 7", 0),
    #              ("3 * 3 / 7", 1),
    #              ("12", 12)]
    #         for str_expr, val in L:
    #             cell = {"ZZ22": 3, "A47": 8}
    #             expr = arithm_expr_parse_verA(str_expr.split())
    #             self.assertEqual(arithm_expr_eval_verA(cell, expr), val)